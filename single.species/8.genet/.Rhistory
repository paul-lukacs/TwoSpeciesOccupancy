# Primeira coisa a fazer é verificar se os dados da variavel dependente seguem uma distribuicao normal
hist(I(aves$IndiceAves^2), bty='n', col="grey", breaks=20)
shapiro.test(I(aves$IndiceAves^2))
hist(sqrt(aves$IndiceAves), bty='n', col="grey", breaks=20) # transformacao para
hist(log(aves$IndiceAves), bty='n', col="grey", breaks=20) # tranformacao para logaritmo
mod0 <- glmer(IndiceAves ~ aSupVegSec.z+aSupPast.z, data=aves, family = gaussian) # sem efeitos aleatorios
mod1 <- glmer(IndiceAves ~ aSupVegSec.z+aSupPast.z + (1|Campanha.letra), data=aves, family = gaussian) # efeitos aleatorios do ano
mod2 <- glmer(IndiceAves ~ aSupVegSec.z+aSupPast.z + (1|Modulo), data=aves) # efeitos aleatorios do modulo
mod3 <- glmer(IndiceAves ~ aSupVegSec.z+aSupPast.z + (1|Campanha.letra) + (1|Modulo), data=aves) # efeitos aleatorios do ano e do modulo
mod4 <- glmer(IndiceAves ~ aSupVegSec.z+aSupPast.z + (1|Campanha.letra/Modulo), data=aves) # efeitos aleatorios do modulo anichado dentro do ano
# Comparar os modelos
model.sel(mod0,mod1,mod2,mod3,mod4)
mod0 <- glmer(IndiceAves ~ aSupVegSec.z+aSupPast.z, data=aves, family = gaussian) # sem efeitos aleatorios
# Comparar os modelos
model.sel(mod0,mod1,mod2,mod3,mod4)
mod0 <- glm(IndiceAves ~ aSupVegSec.z+aSupPast.z, data=aves, family = gaussian) # sem efeitos aleatorios
# Comparar os modelos
model.sel(mod0,mod1,mod2,mod3,mod4)
# ver o modelo
summary(mod3)
res <- residuals(mod3) # extrair os residuos do modelo
chisq.test(mod3)
hist(res, bty='n', col="grey", breaks=20) # verificar se os residuos seguem distribuicao normal
shapiro.test(res)
mod0 <- glm(IndiceAves ~ aSupVegSec.z+aSupPast.z, data=aves, family = gaussian) # sem efeitos aleatorios
mod1 <- glmer(IndiceAves ~ aSupVegSec.z+aSupPast.z + (1|Campanha.letra), data=aves, family = gaussian) # efeitos aleatorios do ano
mod2 <- glmer(IndiceAves ~ aSupVegSec.z+aSupPast.z + (1|Modulo), data=aves, family = gaussian) # efeitos aleatorios do modulo
mod3 <- glmer(IndiceAves ~ aSupVegSec.z+aSupPast.z + (1|Campanha.letra) + (1|Modulo), data=aves, family = gaussian) # efeitos aleatorios do ano e do modulo
mod4 <- glmer(IndiceAves ~ aSupVegSec.z+aSupPast.z + (1|Campanha.letra/Modulo), data=aves, family = gaussian) # efeitos aleatorios do modulo anichado dentro do ano
# Comparar os modelos
model.sel(mod0,mod1,mod2,mod3,mod4) # O modelo com melhor suporte é o de efeitos aleatorios do ano e do modulo (mod3)
mod3G <- glmer(IndiceAves ~ aSupVegSec.z+aSupPast.z + (1|Campanha.letra) + (1|Modulo), data=aves, family = Gamma) # efeitos aleatorios do ano e do modulo
# Comparar os modelos
model.sel(mod3,mod3G)
hist(res, bty='n', col="grey", breaks=20, main="") # verificar se os residuos seguem distribuicao normal
plot(mod3)
Anova(mod3)
Anova(mod3) # Verificar se as variaveis de efeitos fixos do modelo tem um relacao significativa com o indice de biodiversidade.
mod3.1 <- lmer(IndiceAves ~ aSupVegSec.z + (1|Campanha.letra) + (1|Modulo), data=aves) #
mod3 <- lmer(IndiceAves ~ aSupVegSec.z+aSupPast.z + (1|Campanha.letra) + (1|Modulo), data=aves) # efeitos aleatorios do ano e do modulo
mod3 <- glmer(IndiceAves ~ aSupVegSec.z+aSupPast.z + (1|Campanha.letra) + (1|Modulo), data=aves, family = gaussian) # efeitos aleatorios do ano e do modulo
mod3.0 <- lmer(IndiceAves ~ aSupVegSec.z+aSupPast.z + (1|Campanha.letra) + (1|Modulo), data=aves) # efeitos aleatorios do ano e do modulo
mod3.1 <- lmer(IndiceAves ~ aSupVegSec.z + (1|Campanha.letra) + (1|Modulo), data=aves) #
mod3.2 <- lmer(IndiceAves ~ aSupVegSec.z + I(aSupVegSec.z^2) + (1|Campanha.letra) + (1|Modulo), data=aves) #
mod3.3 <- lmer(IndiceAves ~ aSupPast.z + (1|Campanha.letra) + (1|Modulo), data=aves) #
mod3.4 <- lmer(IndiceAves ~ aSupPast.z + I(aSupPast.z^2) + (1|Campanha.letra) + (1|Modulo), data=aves) #
model.sel(mod3.0,mod3.1,mod3.2,mod3.3,mod3.4)
names(aves)
# Avaliar se os melhores modelos sao com as duas variaveis, com so uma delas, ou considerando o efeito
mod0.1 <- lmer(IndiceAves ~ dMin.Z + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.11 <- lmer(IndiceAves ~ dMin.Z + I(dMin.Z^2) + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.2 <- lmer(IndiceAves ~ aFLR.Sitio.dMin.Z + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.21 <- lmer(IndiceAves ~ aFLR.Sitio.dMin.Z + I(aFLR.Sitio.dMin.Z^2) + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.3 <- lmer(IndiceAves ~ aVegSec.Sitio.dMin.Z + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.31 <- lmer(IndiceAves ~ aVegSec.Sitio.dMin.Z + I(aVegSec.Sitio.dMin.Z^2) (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.31 <- lmer(IndiceAves ~ aVegSec.Sitio.dMin.Z + I(aVegSec.Sitio.dMin.Z^2) + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.4 <- lmer(IndiceAves ~ aPast.Sitio.dMin.Z + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.41 <- lmer(IndiceAves ~ aPast.Sitio.dMin.Z + I(aPast.Sitio.dMin.Z^2) + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.5 <- lmer(IndiceAves ~ aTOT.dMin.Z + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.51 <- lmer(IndiceAves ~ aTOT.dMin.Z + I(aTOT.dMin.Z^2) + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.6 <- lmer(IndiceAves ~ aSupFLR.z + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.61 <- lmer(IndiceAves ~ aSupFLR.z + I(aSupFLR.z^2) + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.7 <- lmer(IndiceAves ~ aSupVegSec.z + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.71 <- lmer(IndiceAves ~ aSupVegSec.z + I(aSupVegSec.z^2) + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.8 <- lmer(IndiceAves ~ aSupPast.z + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.81 <- lmer(IndiceAves ~ aSupPast.z + I(aSupPast.z^2) + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.9 <- lmer(IndiceAves ~ aSupTOT.z + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.91 <- lmer(IndiceAves ~ aSupTOT.z +I(aSupTOT.z^2)  + (1|Campanha.letra) + (1|Modulo), data=aves)
mod0.10 <- lmer(IndiceAves ~ Habitat + (1|Campanha.letra) + (1|Modulo), data=aves)
# Comparar os modelos
model.sel(mod0.1,mod0.11,mod0.2,mod0.21,mod0.3,mod0.31,mod0.4,mod0.41,mod0.5,mod0.51,mod0.6,mod0.61,mod0.7,mod0.71,mod0.8,mod0.81,mod0.9,mod0.91,mod0.10)
# Avaliar se os melhores modelos sao com as duas variaveis, com so uma delas, ou considerando o efeito
mod0 <- lmer(IndiceAves ~ (1|Campanha.letra) + (1|Modulo), data=aves)
# Comparar os modelos
model.sel(mod0,mod0.1,mod0.11,mod0.2,mod0.21,mod0.3,mod0.31,mod0.4,mod0.41,mod0.5,mod0.51,mod0.6,mod0.61,mod0.7,mod0.71,mod0.8,mod0.81,mod0.9,mod0.91,mod0.10)
names(aves)
head(Cement)
aves<-aves[,-c(1,4,11)]
names(aves)
fm1 <- lmer(IndiceAves ~ . + (1|Campanha.letra) + (1|Modulo), data=aves)
summary(fm1)
names(aves)
fm1 <- lmer(IndiceAves ~ dMin.Z + aFLR.Sitio.dMin.Z + aVegSec.Sitio.dMin.Z + aPast.Sitio.dMin.Z + aTOT.dMin.Z + aSupFLR.z + aSupVegSec.z + aSupPast.z + aSupTOT.z + Habitat + (1|Campanha.letra) + (1|Modulo), data=aves)
summary(fm1)
x<-dredge(fm1, m.lim = c(0, 2))
options(na.action = "na.fail") #  prevent fitting sub-models to different datasets
x<-dredge(fm1, m.lim = c(0, 2))
par(mar = c(3,5,6,4))
plot(dd, labAsExpr = TRUE)
plot(x, labAsExpr = TRUE)
model.avg(x, subset = delta < 2)
# Comparar os modelos
model.sel(mod0,mod0.1,mod0.11,mod0.2,mod0.21,mod0.3,mod0.31,mod0.4,mod0.41,mod0.5,mod0.51,mod0.6,mod0.61,mod0.7,mod0.71,mod0.8,mod0.81,mod0.9,mod0.91,mod0.10) # De facto, o melhor modelo que
summar(x)
x
## TESTAR CORRELACAO ENTRE VARIAVEIS
#spearman correlation
library(Hmisc)
names(aves)
covs <- as.matrix(siteCovs.nb[,c(4:13)])
sprmn<-rcorr(aves[,c(4:13)], type="spearman")
sprmn<-rcorr(aves[,c(4:12)], type="spearman")
aves[,c(4:12)]
head(aves[,c(4:12)])
covs <- aves[,c(4:12)]
sprmn<-rcorr(covs, type="spearman")
covs <- aves[,c(4:12)]
sprmn<-rcorr(covs, type="spearman")
rcorr(covs, type="spearman")
covs <- data.frame(aves[,c(4:12)])
sprmn<-rcorr(covs, type="spearman")
sprmn<-rcorr(covs)
aves <- read.csv("/Users/pedromonterroso/Documents/Trabalho/Alunos/Mestrados/Luiz Cesca/bases de dados/20180219/avesfinal.csv", sep = ",", header = T)
aves<-aves[,-c(1,4,11)]
## TESTAR CORRELACAO ENTRE VARIAVEIS
#spearman correlation
library(Hmisc)
covs <- data.frame(aves[,c(4:12)])
sprmn<-rcorr(covs,type = "spearman")
covs <- as.matrix(aves[,c(4:12)])
sprmn<-rcorr(covs,type = "spearman")
sprmn[[1]]
covs <- as.matrix(aves[,c(3:12)])
sprmn<-rcorr(covs,type = "spearman")
sprmn[[1]]
write.csv(sprmn[[1]], "/Users/pedromonterroso/Documents/Trabalho/Alunos/Mestrados/Luiz Cesca/bases de dados/20180219/sprmn.csv")
# Testar modelos com todas as combinacoes de variaveis (nao considerando as suas interaccoes)
fm1 <- lmer(IndiceAves ~ dMin.Z + aVegSec.Sitio.dMin.Z + aPast.Sitio.dMin.Z + aTOT.dMin.Z + aSupVegSec.z + aSupTOT.z + Habitat + (1|Campanha.letra) + (1|Modulo), data=aves)
options(na.action = "na.fail") # prevenir o ajuste de sub-modelos a dados diferentes
x<-dredge(fm1, m.lim = c(0, 2)) # fazer todas a combinacoes de modelos com um maximo de 2 variaveis em simultaneo
model.avg(x, subset = delta < 2) #calcular o model av
model.avg(x)
y<-model.avg(x)
summary(y)
# FAZER MODEL DREGDGE COM O PACKAGE MuMIn PARA AVALIAR O PESO DE CADA VARIAVEL
# Testar modelos com todas as combinacoes de variaveis (nao considerando as suas interaccoes). Com esta aprozximação nao é possivel avaliar as interacçoes entre variaveis.
mfull <- lmer(IndiceAves ~ dMin.Z + aVegSec.Sitio.dMin.Z + aPast.Sitio.dMin.Z + aTOT.dMin.Z + aSupVegSec.z + aSupTOT.z + Habitat + (1|Campanha.letra) + (1|Modulo), data=aves)
options(na.action = "na.fail") # prevenir o ajuste de sub-modelos a dados diferentes
dd<-dredge(mfull, m.lim = c(0, 2)) # fazer todas a combinacoes de modelos com um maximo de 2 variaveis em simultaneo
all<-model.avg(dd) #fazer o model average de todos os modelos
summary(all)
confint(all)
d2<-model.avg(dd,subset = delta < 2)
summary(d2)  # obter resultado do model average para as variaveis dentro do delta AICc <2
confint(d2) # obter intervalo de confianca das estimativas
mod0 <- glm(IndiceAves ~ dMin.Z, data=aves, family = gaussian) # sem efeitos aleatorios
mod0 <- glm(IndiceAves ~ dMin.Z, data=aves, family = gaussian) # sem efeitos aleatorios
mod1 <- glmer(IndiceAves ~ dMin.Z + (1|Campanha.letra), data=aves, family = gaussian) # efeitos aleatorios do ano
mod2 <- glmer(IndiceAves ~ dMin.Z + (1|Modulo), data=aves, family = gaussian) # efeitos aleatorios do modulo
mod3 <- glmer(IndiceAves ~ dMin.Z + (1|Campanha.letra) + (1|Modulo), data=aves, family = gaussian) # efeitos aleatorios do ano e do modulo
mod4 <- glmer(IndiceAves ~ dMin.Z + (1|Campanha.letra/Modulo), data=aves, family = gaussian) # efeitos aleatorios do modulo anichado dentro do ano
# Comparar os modelos
model.sel(mod0,mod1,mod2,mod3,mod4) # O modelo com melhor suporte é o de efeitos aleatorios do ano e do modulo (mod3)
# verificar o melhor modelo
summary(mod3)
res <- residuals(mod3) # extrair os residuos do modelo
hist(res, bty='n', col="grey", breaks=20, main="") # verificar se os residuos seguem distribuicao normal
shapiro.test(res) # apesar de o histograma parecer apresentar uma distribuicao normal, o teste de shapiro é significativo, o que indica que a distribuicao dos residuos pode nao ser normal. Neste caso, vamos tentar ajustar o modelo com uma distribuicao de erros gamma (é algo entre o gaussian e o poisson), para verificar se tem melhor ajuste
mod3G <- glmer(IndiceAves ~ aSupVegSec.z+aSupPast.z + (1|Campanha.letra) + (1|Modulo), data=aves, family = Gamma) # efeitos aleatorios do ano e do modulo
mod3G <- glmer(IndiceAves ~ dMin.Z + (1|Campanha.letra) + (1|Modulo), data=aves, family = Gamma) # efeitos aleatorios do ano e do modulo
# Comparar os modelos
model.sel(mod3,mod3G) # o modelo que assume a distribuicao de erros normal (mod3) tem melhor ajuste que o modelo Gamma.
plot(mod3) # fazer o plot dos valores previstos contra os residuos. De facto, apesar haver tres valores que sao muito inferiores ao resto, o residuos parecem distribuir-se de forma mais ou menos homogenea em volta do zero, o que revela que nao há desvios importantes no ajuste do modelo.
Anova(mod3) # Verificar se as variaveis de efeitos fixos do modelo tem um relacao significativa com o indice de biodiversidade. Apesar de estarem no melhor modelo, o seu efeito nao é significativo, o que indica que apesar de contribuirem para um melhor ajuste dos dados, provavelmente têm muita variabilidade associada.
summary(aves$dMin.Z)
dMin <- seq(min(aves$dMin.Z),max(aves$dMin.Z),10)
dMin
dMin <- seq(min(aves$dMin.Z),max(aves$dMin.Z),10)
dMin
seq(0,1,10)
seq(0,1,100)
seq(1,2,10)
dMin <- seq(min(aves$dMin.Z),max(aves$dMin.Z),by = 0.1)
dMin
dMin <- seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100)
dMin
pred <- data.frame(predict(mod3, type="link", newdata=dMin, re.form=NA, se.fit=T))
dMin <- data.frame(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100))
pred <- data.frame(predict(mod3, type="link", newdata=dMin, re.form=NA, se.fit=T))
colnames(dMin) <- dMin.Z
colnames(dMin) <- "dMin.Z"
pred <- data.frame(predict(mod3, type="link", newdata=dMin, re.form=NA, se.fit=T))
View(pred)
pred$inf <- pred$fit-1.96*pred$se.fit
pred$sup <- pred$fit+1.96*pred$se.fit
pred <- rbind(dMin,pred)
pred <- cbind(dMin,pred)
plot(pred$dMin.Z,pred$fit, las=1, xlab="Distancia",ylab="Diversidade prevista de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n") # add graph for best fit
plot(pred$dMin.Z,pred$fit, las=1, xlab="Distancia",ylab="Diversidade prevista de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(0,5)) # add graph for best fit
plot(pred$dMin.Z,pred$fit, las=1, xlab="Distancia",ylab="Diversidade prevista de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(2,5)) # add graph for best fit
plot(pred$dMin.Z,pred$fit, las=1, xlab="Distancia",ylab="Diversidade prevista de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,5)) # add graph for best fit
plot(pred$dMin.Z,pred$fit, las=1, xlab="Distancia",ylab="Diversidade prevista de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4)) # add graph for best fit
min(aves$dMin.Z)
max(aves$dMin.Z)
plot(pred$dMin.Z,pred$fit, las=1, xlab="Distancia",ylab="Diversidade prevista de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-1,6)) # add graph for best fit
plot(pred$dMin.Z,pred$fit, las=1, xlab="Distancia",ylab="Diversidade prevista de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-1,5.5)) # add graph for best fit
plot(pred$dMin.Z,pred$fit, las=1, xlab="Distancia",ylab="Diversidade prevista de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-1,5)) # add graph for best fit
plot(pred$dMin.Z,pred$fit, las=1, xlab="Distancia",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-1,5)) # add graph for best fit
polygon(c(pred$dMin.Z,rev(pred$dMin.Z)),c(pred$inf,rev(pred$sup)),border=NA,col=rgb(0,0,255, 0.2*255, maxColorValue = 255)) # add confidence interval
pred <- data.frame(predict(d2, type="link", newdata=dMin, re.form=NA, se.fit=T))
x <- predict(d2, newdata = dMin, se.fit = T)
x <- MuMIn::predict(d2, newdata = dMin, se.fit = T)
x <- MuMIn::predict(d2, newdata = dMin, se.fit = T, full = FALSE)
x <- predict(d2, newdata = dMin, se.fit = T, full = FALSE)
x <- MuMIn::predict(d2, newdata = dMin, se.fit = T, full = FALSE)
summary(d2)
x <- dMin
x$pred <- 3.57158+x$dMin.Z*-0.06528
x$inf <- 3.57158+x$dMin.Z*(-0.06528-(1.96*0.02512))
x$inf <- 3.57158+x$dMin.Z*(-0.06528-(1.96*0.02512))
x$sup <- 3.57158+x$dMin.Z*(-0.06528+(1.96*0.02512))
plot(x$dMin.Z,x$pred, las=1, xlab="Distancia",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-1,5)) # add graph for best fit
polygon(c(x$dMin.Z,rev(x$dMin.Z)),c(x$inf,rev(x$sup)),border=NA,col=rgb(0,0,255, 0.2*255, maxColorValue = 255)) # add confidence interval
x$inf <- 3.57158+x$dMin.Z*((1.96*(-0.06528-0.02512))
x$inf <- 3.57158+x$dMin.Z*((1.96*(-0.06528-0.02512)
x$inf <- 3.57158+x$dMin.Z*((1.96*(-0.06528-0.02512))
x$inf <- 3.57158+x$dMin.Z*(1.96*(-0.06528-0.02512))
d2<-get.models(dd,subset = delta < 2)
avgm <- model.avg(confset.95p)
avgm <- model.avg(d2)
summary(avgm)  # obter resultado do model average para as variaveis dentro do delta AICc <2
confint(avgm) # obter intervalo de confianca das estimativas
newdata <- as.data.frame(lapply(lapply(Cement[, -1], mean), rep, 25))
head(newdata)
pred <- data.frame(
model = sapply(d2, predict, newdata = dMin),
averaged.subset = predict(avgm, dMin, full = FALSE),
averaged.full = predict(avgm, dMin, full = TRUE)
)
pred.se <- predict(avgm, dMin, se.fit = TRUE)
summary(mod3)
View(pred)
3.60755+(-0.705329)*(-0.06528-0.02505*1.96)
3.60755+(-0.705329)*(1.96*(-0.06528-0.02505)
)
pred <- data.frame(
model = sapply(d2, predict, newdata = dMin),
averaged.subset = predict(avgm, dMin, full = FALSE),
averaged.full = predict(avgm, dMin, full = TRUE)
)
levels(aves$Campanha.letra)
dMin <- data.frame(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100)),7)
rep(2,3)
dMin <- data.frame(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7)
dMin <- data.frame(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100)),7)
dMin <- rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7)
dMin <- data.frame(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7))
rep("a",100)
Campanha <- c(rep("a",100),rep("b",100),rep("c",100),rep("d",100),rep("d",100),rep("f",100),rep("g",100))
newdata <- data.frame(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7))
pred <- data.frame(
model = sapply(d2, predict, newdata = dMin),
averaged.subset = predict(avgm, dMin, full = FALSE),
averaged.full = predict(avgm, dMin, full = TRUE)
)
newdata$Campanha.letra <- c(rep("a",100),rep("b",100),rep("c",100),rep("d",100),rep("d",100),rep("f",100),rep("g",100))
levels(aves$Modulo)
newdata <- data.frame(rep(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7),11)
newdata <- data.frame(rep(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7),11)
newdata <- data.frame(rep(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7),11))
colnames(dMin) <- "dMin.Z"
newdata$Campanha.letra <- rep(c(rep("a",100),rep("b",100),rep("c",100),rep("d",100),rep("d",100),rep("f",100),rep("g",100)),11)
View(newdata)
newdata <- data.frame(rep(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7),11))
colnames(dMin) <- "dMin.Z"
newdata$Campanha.letra <- rep(c(rep("a",100),rep("b",100),rep("c",100),rep("d",100),rep("d",100),rep("f",100),rep("g",100)),11)
newdata <- data.frame(rep(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7),11))
colnames(newdata) <- "dMin.Z"
newdata$Campanha.letra <- rep(c(rep("a",100),rep("b",100),rep("c",100),rep("d",100),rep("d",100),rep("f",100),rep("g",100)),11)
newdata$Modulo <- rep(c(rep(1,700),rep(2,700),rep(3,700),rep(4,700),rep(5,700),rep(6,700),rep(7,700),rep(8,700),rep("a1",700),rep("a2",700),rep("a3",700)),7)
c(rep(1,700),rep(2,700),rep(3,700),rep(4,700),rep(5,700),rep(6,700),rep(7,700),rep(8,700),rep("a1",700),rep("a2",700),rep("a3",700))
x <- rep(c(rep(1,700),rep(2,700),rep(3,700),rep(4,700),rep(5,700),rep(6,700),rep(7,700),rep(8,700),rep("a1",700),rep("a2",700),rep("a3",700)),7)
View(newdata)
x <- c(rep(1,700),rep(2,700),rep(3,700),rep(4,700),rep(5,700),rep(6,700),rep(7,700),rep(8,700),rep("a1",700),rep("a2",700),rep("a3",700)))
x <- c(rep(1,700),rep(2,700),rep(3,700),rep(4,700),rep(5,700),rep(6,700),rep(7,700),rep(8,700),rep("a1",700),rep("a2",700),rep("a3",700))
newdata$Modulo <- c(rep(1,700),rep(2,700),rep(3,700),rep(4,700),rep(5,700),rep(6,700),rep(7,700),rep(8,700),rep("a1",700),rep("a2",700),rep("a3",700))
View(newdata)
pred <- data.frame(
model = sapply(d2, predict, newdata = newdata),
averaged.subset = predict(avgm, newdata, full = FALSE),
averaged.full = predict(avgm, newdata, full = TRUE)
)
pred <- data.frame(
model = sapply(d2, predict, newdata = newdata),
averaged.subset = predict(avgm, newdata, full = FALSE, se.fit = T),
averaged.full = predict(avgm, newdata, full = TRUE)
)
dMin <- seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100)
#Calcular os valores previstos de acordo com o melhor modelo (mod3)
dMin <- seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100)
colnames(dMin) <- "dMin.Z"
pred.mod3 <- data.frame(predict(mod3, type="link", newdata=dMin, re.form=NA, se.fit=T))
#Calcular os valores previstos de acordo com o melhor modelo (mod3)
dMin <- data.frame(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100))
colnames(dMin) <- "dMin.Z"
pred.mod3 <- data.frame(predict(mod3, type="link", newdata=dMin, re.form=NA, se.fit=T))
pred$inf <- pred$fit-1.96*pred$se.fit
pred$sup <- pred$fit+1.96*pred$se.fit
pred.mod3 <- data.frame(predict(mod3, type="link", newdata=dMin, re.form=NA, se.fit=T))
pred.mod3$inf <- pred.mod3$fit-1.96*pred$se.fit
pred.mod3$inf <- pred.mod3$fit-1.96*pred.mod3$se.fit
pred.mod3$sup <- pred.mod3$fit+1.96*pred.mod3$se.fit
pred.mod3 <- cbind(dMin,pred.mod3)
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(x$dMin.Z,x$pred, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-0.5,5))
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$pred, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-0.5,5))
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$fit, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-0.5,5))
polygon(c(pred.mod3$dMin.Z,rev(pred.mod3$dMin.Z)),c(pred.mod3$inf,rev(pred.mod3$sup)),border=NA,col=rgb(0,0,255, 0.2*255, maxColorValue = 255)) # adicionar o intervalo de confiança
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$fit, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-1,5))
polygon(c(pred.mod3$dMin.Z,rev(pred.mod3$dMin.Z)),c(pred.mod3$inf,rev(pred.mod3$sup)),border=NA,col=rgb(0,0,255, 0.2*255, maxColorValue = 255)) # adicionar o intervalo de confiança
#Calcular os valores previstos de acordo com o melhor modelo (mod3)
dMin <- data.frame(seq(-1,6,length.out = 100))
colnames(dMin) <- "dMin.Z"
pred.mod3 <- data.frame(predict(mod3, type="link", newdata=dMin, re.form=NA, se.fit=T))
pred.mod3$inf <- pred.mod3$fit-1.96*pred.mod3$se.fit
pred.mod3$sup <- pred.mod3$fit+1.96*pred.mod3$se.fit
pred.mod3 <- cbind(dMin,pred.mod3)
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$fit, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-1,5))
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$fit, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-1,6))
polygon(c(pred.mod3$dMin.Z,rev(pred.mod3$dMin.Z)),c(pred.mod3$inf,rev(pred.mod3$sup)),border=NA,col=rgb(0,0,255, 0.2*255, maxColorValue = 255)) # adicionar o intervalo de confiança
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$fit, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(2.5,4), xlim = c(-1,6))
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$fit, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3.5,4), xlim = c(-1,6))
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$fit, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-1,6))
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$fit, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(2.5,4), xlim = c(-1,6))
polygon(c(pred.mod3$dMin.Z,rev(pred.mod3$dMin.Z)),c(pred.mod3$inf,rev(pred.mod3$sup)),border=NA,col=rgb(0,0,255, 0.2*255, maxColorValue = 255)) # adicionar o intervalo de confiança
#Calcular os valores previstos de acordo com o model average (nao permite estimar os intervalos de confianca devido aos factore aleatorios)
newdata <- data.frame(rep(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7),11))
colnames(newdata) <- "dMin.Z"
newdata$Campanha.letra <- rep(c(rep("a",100),rep("b",100),rep("c",100),rep("d",100),rep("d",100),rep("f",100),rep("g",100)),11)
newdata$Modulo <- c(rep(1,700),rep(2,700),rep(3,700),rep(4,700),rep(5,700),rep(6,700),rep(7,700),rep(8,700),rep("a1",700),rep("a2",700),rep("a3",700))
pred.avg <- data.frame(
model = sapply(d2, predict, newdata = newdata),
averaged.subset = predict(avgm, newdata, full = FALSE, se.fit = T),
averaged.full = predict(avgm, newdata, full = TRUE)
)
pred.avg <- data.frame(
model = sapply(d2, predict, newdata = newdata),
averaged.subset = predict(avgm, newdata, full = FALSE),
averaged.full = predict(avgm, newdata, full = TRUE)
)
pred.avg <- data.frame(
model = sapply(d2, predict, newdata = newdata),
averaged.subset = predict(avgm, newdata, full = FALSE))
summary(all)
estimates(all)
estimate(all)
pi()
pi
pi*(0.32)^2
sqrt(1/pi)
pi*(0.56)^2
2*pi*0.5641896
exp(1.44)/(1+exp(1.44))
exp(-5.23)/(1+exp(-5.23))
library(mcmcplots)
library(R2jags)
setwd( "/Users/pedromonterroso/Documents/Trabalho/Publications/Papers/In prep/1.spatiotemporal interactions among Iberian carnivores/3.analyses/1.rcode/occ/single.species/genet" )
source("gg.nb.R")
nocc <- ncol(EH)
nSites <- nrow(EH)
naive <- sum(apply(EH, 1, sum, na.rm=T) > 0) / nrow(EH)
# random effect
areaID <- as.numeric(ygg[,3])
narea <- max(areaID)
# detection covariates
trail <- detCovs.nb$trail.nb[,3]
# site covariates
EVI500 <- siteCovs.nb$EVI500
rod.d <- siteCovs.nb$rdt.ha
rod.ts <- siteCovs.nb$rod.ts
Open <- siteCovs.nb$Open
occ.data <- list( y=EH,
nSites=nSites,
nocc=nocc,
trail=trail,
EVI500=EVI500,
rod.d=rod.d,
rod.ts=rod.ts,
Open=Open,
areaID=areaID,
narea=narea
)
occ.inits <- function(){
list(
z = rep(1,nSites),
b0.psi = runif(1, -3, 3),
b1.psi = runif(1, -3, 3),
b2.psi = runif(1, -3, 3),
b3.psi = runif(1, -3, 3),
b4.psi = runif(1, -3, 3),
b0.p = runif(1, -3, 3),
b1.p = runif(1, -3, 3),
sigma = runif(1, 0, 0.1)
)
}
occ.parm <- c( "b0.psi",
"b1.psi",
"b2.psi",
"b3.psi",
"b4.psi",
"b0.p",
"b1.p",
"mean.psi",
"mean.p",
"totOcc",
"fit",
"fit.new",
"sigma"
)
# set up for MCMC run
ni <- 1000 #500000
# set up for MCMC run
ni <- 10000 #500000
nt <- 1     #5
nb <- 2000 #20000
nc <- 3
# run the MCMC chain in JAGS
occ.genet <- jags( occ.data,
occ.inits,
occ.parm,
"JAGSmodel.gg.R",
n.chains=nc,
n.iter=ni,
n.burnin=nb,
n.thin=nt
)
# set up for MCMC run
ni <- 500000 #500000
nt <- 5     #5
nb <- 20000 #20000
nc <- 3
# run the MCMC chain in JAGS
occ.genet <- jags( occ.data,
occ.inits,
occ.parm,
"JAGSmodel.gg.R",
n.chains=nc,
n.iter=ni,
n.burnin=nb,
n.thin=nt
)
mcmcplot(occ.genet)
occ.genet
`expit` <-
function(x){
exp(x)/(1+exp(x))
}
expit(-2.132)
expit(1.649)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
occ.genet$BUGSoutput
occ.genet$BUGSoutput$n.sims
occ.genet$BUGSoutput$sims.matrix
occ.genet$BUGSoutput$sims.matrix$b0.psi
v<-occ.genet$BUGSoutput$sims.matrix
v
names(v)
colnames(v)
Mode(v$b0.psi)
v <- data.frame(v)
Mode(v$b0.psi)
expit(Mode(v$b0.psi))
expit(Mode(v$b0.p))
Mode(v$mean.psi)
occ.genet
library(vioplot)
v <- data.frame(occ.genet$BUGSoutput$sims.matrix)
attach(v)
vioplot(b0.psi, b1.psi, b2.psi, b3.psi, b4.psi, names=c("baseline occupancy", "EVI", "Rodent/ha", "Rodent TS", "Open habitats"),
col=c(adjustcolor(1,alpha.f = 0.15)),border=NA, horizontal = TRUE)
abline(x=0)
abline(v = 0)
vioplot(b0.psi, b1.psi, b2.psi, b3.psi, b4.psi, names=c("baseline occupancy", "EVI", "Rodent/ha", "Rodent TS", "Open habitats"), col=c(adjustcolor(1,alpha.f = 0.15)),border=NA, horizontal = TRUE, bty='n')
vioplot(b0.psi, b1.psi, b2.psi, b3.psi, b4.psi, names=c("baseline occupancy", "EVI", "Rodent/ha", "Rodent TS", "Open habitats"), col=c(adjustcolor(1,alpha.f = 0.15)),border=NA, horizontal = TRUE, las =2)
vioplot(b0.psi, b1.psi, b2.psi, b3.psi, b4.psi, names=c("occ", "EVI", "Rod.d", "Rod.ts", "Open"), col=c(adjustcolor(1,alpha.f = 0.15)),border=NA, horizontal = TRUE)
abline(v = 0, lty=2, col="gray")
save.image("~/Documents/Trabalho/Publications/Papers/In prep/1.spatiotemporal interactions among Iberian carnivores/3.analyses/1.rcode/occ/single.species/genet/occ.genet.RData")
load("/Users/pedromonterroso/Documents/Trabalho/Publications/Papers/In prep/1.spatiotemporal interactions among Iberian carnivores/3.analyses/1.rcode/occ/single.species/smarten/smarten.occ.RData")
#function to obtain the mode
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
library(vioplot)
v <- data.frame(occ.smarten$BUGSoutput$sims.matrix)
attach(v)
vioplot(b0.psi, b1.psi, b2.psi, b3.psi, b4.psi, b5.psi, b6.psi names=c("occ", "EVI", "Rod.d", "Rod.ts","Rod.d*ts", "Lynx","Open"), col=c(adjustcolor(1,alpha.f = 0.15)),border=NA, horizontal = TRUE)
vioplot(b0.psi, b1.psi, b2.psi, b3.psi, b4.psi, b5.psi, b6.psi, names=c("occ", "EVI", "Rod.d", "Rod.ts","Rod.d*ts", "Lynx","Open"), col=c(adjustcolor(1,alpha.f = 0.15)),border=NA, horizontal = TRUE)
abline(v = 0, lty=2, col="gray")
`expit` <-  function(x){
exp(x)/(1+exp(x))
}
expit(Mode(v$b0.psi))
Mode(v$b0.psi)
expit(Mode(v$b0.psi))
expit(Mode(v$b0.p))
hist(v$b0.psi)
density(v$b0.psi)
plot(density(v$b0.psi))
expit(mean(v$b0.p))
