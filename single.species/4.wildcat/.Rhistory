x$pred <- 3.57158+x$dMin.Z*-0.06528
x$inf <- 3.57158+x$dMin.Z*(-0.06528-(1.96*0.02512))
x$inf <- 3.57158+x$dMin.Z*(-0.06528-(1.96*0.02512))
x$sup <- 3.57158+x$dMin.Z*(-0.06528+(1.96*0.02512))
plot(x$dMin.Z,x$pred, las=1, xlab="Distancia",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-1,5)) # add graph for best fit
polygon(c(x$dMin.Z,rev(x$dMin.Z)),c(x$inf,rev(x$sup)),border=NA,col=rgb(0,0,255, 0.2*255, maxColorValue = 255)) # add confidence interval
x$inf <- 3.57158+x$dMin.Z*((1.96*(-0.06528-0.02512))
x$inf <- 3.57158+x$dMin.Z*((1.96*(-0.06528-0.02512)
x$inf <- 3.57158+x$dMin.Z*((1.96*(-0.06528-0.02512))
x$inf <- 3.57158+x$dMin.Z*(1.96*(-0.06528-0.02512))
d2<-get.models(dd,subset = delta < 2)
avgm <- model.avg(confset.95p)
avgm <- model.avg(d2)
summary(avgm)  # obter resultado do model average para as variaveis dentro do delta AICc <2
confint(avgm) # obter intervalo de confianca das estimativas
newdata <- as.data.frame(lapply(lapply(Cement[, -1], mean), rep, 25))
head(newdata)
pred <- data.frame(
model = sapply(d2, predict, newdata = dMin),
averaged.subset = predict(avgm, dMin, full = FALSE),
averaged.full = predict(avgm, dMin, full = TRUE)
)
pred.se <- predict(avgm, dMin, se.fit = TRUE)
summary(mod3)
View(pred)
3.60755+(-0.705329)*(-0.06528-0.02505*1.96)
3.60755+(-0.705329)*(1.96*(-0.06528-0.02505)
)
pred <- data.frame(
model = sapply(d2, predict, newdata = dMin),
averaged.subset = predict(avgm, dMin, full = FALSE),
averaged.full = predict(avgm, dMin, full = TRUE)
)
levels(aves$Campanha.letra)
dMin <- data.frame(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100)),7)
rep(2,3)
dMin <- data.frame(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7)
dMin <- data.frame(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100)),7)
dMin <- rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7)
dMin <- data.frame(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7))
rep("a",100)
Campanha <- c(rep("a",100),rep("b",100),rep("c",100),rep("d",100),rep("d",100),rep("f",100),rep("g",100))
newdata <- data.frame(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7))
pred <- data.frame(
model = sapply(d2, predict, newdata = dMin),
averaged.subset = predict(avgm, dMin, full = FALSE),
averaged.full = predict(avgm, dMin, full = TRUE)
)
newdata$Campanha.letra <- c(rep("a",100),rep("b",100),rep("c",100),rep("d",100),rep("d",100),rep("f",100),rep("g",100))
levels(aves$Modulo)
newdata <- data.frame(rep(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7),11)
newdata <- data.frame(rep(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7),11)
newdata <- data.frame(rep(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7),11))
colnames(dMin) <- "dMin.Z"
newdata$Campanha.letra <- rep(c(rep("a",100),rep("b",100),rep("c",100),rep("d",100),rep("d",100),rep("f",100),rep("g",100)),11)
View(newdata)
newdata <- data.frame(rep(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7),11))
colnames(dMin) <- "dMin.Z"
newdata$Campanha.letra <- rep(c(rep("a",100),rep("b",100),rep("c",100),rep("d",100),rep("d",100),rep("f",100),rep("g",100)),11)
newdata <- data.frame(rep(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7),11))
colnames(newdata) <- "dMin.Z"
newdata$Campanha.letra <- rep(c(rep("a",100),rep("b",100),rep("c",100),rep("d",100),rep("d",100),rep("f",100),rep("g",100)),11)
newdata$Modulo <- rep(c(rep(1,700),rep(2,700),rep(3,700),rep(4,700),rep(5,700),rep(6,700),rep(7,700),rep(8,700),rep("a1",700),rep("a2",700),rep("a3",700)),7)
c(rep(1,700),rep(2,700),rep(3,700),rep(4,700),rep(5,700),rep(6,700),rep(7,700),rep(8,700),rep("a1",700),rep("a2",700),rep("a3",700))
x <- rep(c(rep(1,700),rep(2,700),rep(3,700),rep(4,700),rep(5,700),rep(6,700),rep(7,700),rep(8,700),rep("a1",700),rep("a2",700),rep("a3",700)),7)
View(newdata)
x <- c(rep(1,700),rep(2,700),rep(3,700),rep(4,700),rep(5,700),rep(6,700),rep(7,700),rep(8,700),rep("a1",700),rep("a2",700),rep("a3",700)))
x <- c(rep(1,700),rep(2,700),rep(3,700),rep(4,700),rep(5,700),rep(6,700),rep(7,700),rep(8,700),rep("a1",700),rep("a2",700),rep("a3",700))
newdata$Modulo <- c(rep(1,700),rep(2,700),rep(3,700),rep(4,700),rep(5,700),rep(6,700),rep(7,700),rep(8,700),rep("a1",700),rep("a2",700),rep("a3",700))
View(newdata)
pred <- data.frame(
model = sapply(d2, predict, newdata = newdata),
averaged.subset = predict(avgm, newdata, full = FALSE),
averaged.full = predict(avgm, newdata, full = TRUE)
)
pred <- data.frame(
model = sapply(d2, predict, newdata = newdata),
averaged.subset = predict(avgm, newdata, full = FALSE, se.fit = T),
averaged.full = predict(avgm, newdata, full = TRUE)
)
dMin <- seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100)
#Calcular os valores previstos de acordo com o melhor modelo (mod3)
dMin <- seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100)
colnames(dMin) <- "dMin.Z"
pred.mod3 <- data.frame(predict(mod3, type="link", newdata=dMin, re.form=NA, se.fit=T))
#Calcular os valores previstos de acordo com o melhor modelo (mod3)
dMin <- data.frame(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100))
colnames(dMin) <- "dMin.Z"
pred.mod3 <- data.frame(predict(mod3, type="link", newdata=dMin, re.form=NA, se.fit=T))
pred$inf <- pred$fit-1.96*pred$se.fit
pred$sup <- pred$fit+1.96*pred$se.fit
pred.mod3 <- data.frame(predict(mod3, type="link", newdata=dMin, re.form=NA, se.fit=T))
pred.mod3$inf <- pred.mod3$fit-1.96*pred$se.fit
pred.mod3$inf <- pred.mod3$fit-1.96*pred.mod3$se.fit
pred.mod3$sup <- pred.mod3$fit+1.96*pred.mod3$se.fit
pred.mod3 <- cbind(dMin,pred.mod3)
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(x$dMin.Z,x$pred, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-0.5,5))
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$pred, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-0.5,5))
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$fit, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-0.5,5))
polygon(c(pred.mod3$dMin.Z,rev(pred.mod3$dMin.Z)),c(pred.mod3$inf,rev(pred.mod3$sup)),border=NA,col=rgb(0,0,255, 0.2*255, maxColorValue = 255)) # adicionar o intervalo de confiança
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$fit, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-1,5))
polygon(c(pred.mod3$dMin.Z,rev(pred.mod3$dMin.Z)),c(pred.mod3$inf,rev(pred.mod3$sup)),border=NA,col=rgb(0,0,255, 0.2*255, maxColorValue = 255)) # adicionar o intervalo de confiança
#Calcular os valores previstos de acordo com o melhor modelo (mod3)
dMin <- data.frame(seq(-1,6,length.out = 100))
colnames(dMin) <- "dMin.Z"
pred.mod3 <- data.frame(predict(mod3, type="link", newdata=dMin, re.form=NA, se.fit=T))
pred.mod3$inf <- pred.mod3$fit-1.96*pred.mod3$se.fit
pred.mod3$sup <- pred.mod3$fit+1.96*pred.mod3$se.fit
pred.mod3 <- cbind(dMin,pred.mod3)
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$fit, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-1,5))
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$fit, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-1,6))
polygon(c(pred.mod3$dMin.Z,rev(pred.mod3$dMin.Z)),c(pred.mod3$inf,rev(pred.mod3$sup)),border=NA,col=rgb(0,0,255, 0.2*255, maxColorValue = 255)) # adicionar o intervalo de confiança
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$fit, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(2.5,4), xlim = c(-1,6))
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$fit, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3.5,4), xlim = c(-1,6))
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$fit, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(3,4), xlim = c(-1,6))
# Fazer grafico da biodiversidade de aves prevista, em funcao do melhor modelo (mod3)
plot(pred.mod3$dMin.Z,pred.mod3$fit, las=1, xlab="Distância",ylab="Diversidade de Aves",type="l",lwd=2,col="blue", cex=0.8, bty="n", ylim = c(2.5,4), xlim = c(-1,6))
polygon(c(pred.mod3$dMin.Z,rev(pred.mod3$dMin.Z)),c(pred.mod3$inf,rev(pred.mod3$sup)),border=NA,col=rgb(0,0,255, 0.2*255, maxColorValue = 255)) # adicionar o intervalo de confiança
#Calcular os valores previstos de acordo com o model average (nao permite estimar os intervalos de confianca devido aos factore aleatorios)
newdata <- data.frame(rep(rep(seq(min(aves$dMin.Z),max(aves$dMin.Z),length.out = 100),7),11))
colnames(newdata) <- "dMin.Z"
newdata$Campanha.letra <- rep(c(rep("a",100),rep("b",100),rep("c",100),rep("d",100),rep("d",100),rep("f",100),rep("g",100)),11)
newdata$Modulo <- c(rep(1,700),rep(2,700),rep(3,700),rep(4,700),rep(5,700),rep(6,700),rep(7,700),rep(8,700),rep("a1",700),rep("a2",700),rep("a3",700))
pred.avg <- data.frame(
model = sapply(d2, predict, newdata = newdata),
averaged.subset = predict(avgm, newdata, full = FALSE, se.fit = T),
averaged.full = predict(avgm, newdata, full = TRUE)
)
pred.avg <- data.frame(
model = sapply(d2, predict, newdata = newdata),
averaged.subset = predict(avgm, newdata, full = FALSE),
averaged.full = predict(avgm, newdata, full = TRUE)
)
pred.avg <- data.frame(
model = sapply(d2, predict, newdata = newdata),
averaged.subset = predict(avgm, newdata, full = FALSE))
summary(all)
estimates(all)
estimate(all)
pi()
pi
pi*(0.32)^2
sqrt(1/pi)
pi*(0.56)^2
2*pi*0.5641896
exp(1.44)/(1+exp(1.44))
exp(-5.23)/(1+exp(-5.23))
library(mcmcplots)
library(R2jags)
setwd( "/Users/pedromonterroso/Documents/Trabalho/Publications/Papers/In prep/1.spatiotemporal interactions among Iberian carnivores/3.analyses/1.rcode/occ/single.species/wildcat" )
source("wildcat.nb.R")
EH <- yfs[,4:33]
nocc <- ncol(EH)
nSites <- nrow(EH)
areaID <- as.numeric(yfs[,3])
narea <- max(areaID)
val <- detCovs.nb$v.nb[,3:32]
trail <- detCovs.nb$trail.nb[,3]
cam <- detCovs.nb$lr.nb[,3:32]
TC500 <- siteCovs.nb$TC500
rabbt.d <- siteCovs.nb$rbbt.ha
rabbt.ts <- siteCovs.nb$rbbt.ts
d.sett <- siteCovs.nb$d.sett
rod.ts <- siteCovs.nb$rod.ts
TC500 <- siteCovs.nb$TC500
rabbt.d <- siteCovs.nb$rbbt.ha
rabbt.ts <- siteCovs.nb$rbbt.ts
d.sett <- siteCovs.nb$d.sett
rod.ts <- siteCovs.nb$rod.ts
occ.data <- list( y=EH,
nSites=nSites,
nocc=nocc,
val=val,
trail=trail,
cam=cam,
TC500=TC500,
rabbt.d=rabbt.d,
rabbt.ts=rabbt.ts,
d.sett=d.sett,
rod.ts=rod.ts,
areaID=areaID,
narea=narea
)
occ.inits <- function(){
list(
z = rep(1,nSites),
b0.psi = runif(1, -3, 3),
b1.psi = runif(1, -3, 3),
b2.psi = runif(1, -3, 3),
b3.psi = runif(1, -3, 3),
b4.psi = runif(1, -3, 3),
b5.psi = runif(1, -3, 3),
b0.p = runif(1, -3, 3),
b1.p = runif(1, -3, 3),
b2.p = runif(1, -3, 3),
b3.p = runif(1, -3, 3),
sigma = runif(1, 0, 0.1)
)
}
occ.parm <- c( "b0.psi",
"b1.psi",
"b2.psi",
"b3.psi",
"b4.psi",
"b5.psi",
"b0.p",
"b1.p",
"b2.p",
"b3.p",
"mean.psi",
"mean.p",
"totOcc",
"fit",
"fit.new",
"sigma"
)
# set up for MCMC run
ni <- 20000
nt <- 1
nb <- 2000
nc <- 3
# run the MCMC chain in JAGS
occ.wldcat <- jags( occ.data,
occ.inits,
occ.parm,
"JAGSmodel.wildcat.R",
n.chains=nc,
n.iter=ni,
n.burnin=nb,
n.thin=nt
)
occ.wldcat
mcmcplot(occ.wldcat)
sum(val, na.rm=T)
sum(detCovs.nb$lu.nb, na.rm=T)
sum(detCovs.nb$lu.nb[,3:32], na.rm=T)
sum(detCovs.nb$ctr.nb[,3:32], na.rm=T)
occ.inits <- function(){
list(
z = rep(1,nSites),
b0.psi = runif(1, -3, 3),
b1.psi = runif(1, -3, 3),
b2.psi = runif(1, -3, 3),
b3.psi = runif(1, -3, 3),
b4.psi = runif(1, -3, 3),
b5.psi = runif(1, -3, 3),
b0.p = runif(1, -3, 3),
b1.p = runif(1, -3, 3),
b2.p = runif(1, -3, 3),
sigma = runif(1, 0, 0.1)
)
}
occ.data <- list( y=EH,
nSites=nSites,
nocc=nocc,
trail=trail,
cam=cam,
TC500=TC500,
rabbt.d=rabbt.d,
rabbt.ts=rabbt.ts,
d.sett=d.sett,
rod.ts=rod.ts,
areaID=areaID,
narea=narea
)
occ.parm <- c( "b0.psi",
"b1.psi",
"b2.psi",
"b3.psi",
"b4.psi",
"b5.psi",
"b0.p",
"b1.p",
"b2.p",
"mean.psi",
"mean.p",
"totOcc",
"fit",
"fit.new",
"sigma"
)
# set up for MCMC run
ni <- 50000
nt <- 1
nb <- 2000
nc <- 3
# run the MCMC chain in JAGS
occ.wldcat <- jags( occ.data,
occ.inits,
occ.parm,
"JAGSmodel.wildcat.R",
n.chains=nc,
n.iter=ni,
n.burnin=nb,
n.thin=nt
)
occ.wldcat
mcmcplot(occ.wldcat)
exp(-7.056)/(1+exp(-7.056))
exp(4.937)/(1+exp(4.937))
# set up for MCMC run
ni <- 100000
nt <- 3
nb <- 2000
nc <- 3
# run the MCMC chain in JAGS
occ.wldcat <- jags( occ.data,
occ.inits,
occ.parm,
"JAGSmodel.wildcat.R",
n.chains=nc,
n.iter=ni,
n.burnin=nb,
n.thin=nt
)
mcmcplot(occ.wldcat)
# run the MCMC chain in JAGS
occ.wldcat <- jags( occ.data,
occ.inits,
occ.parm,
"JAGSmodel.wildcat.R",
n.chains=nc,
n.iter=ni,
n.burnin=nb,
n.thin=nt
)
occ.wldcat
sum(EH[,3:32], na.rm=T)
sum(EH, na.rm=T)
naive <- sum(apply(EH, 1, sum, na.rm=T) > 0) / nrow(EH)
sum(apply(EH, 1, sum, na.rm=T) > 0)
occ.data <- list( y=EH,
nSites=nSites,
nocc=nocc,
trail=trail,
TC500=TC500,
rabbt.d=rabbt.d,
rabbt.ts=rabbt.ts,
d.sett=d.sett,
areaID=areaID,
narea=narea
)
occ.inits <- function(){
list(
z = rep(1,nSites),
b0.psi = runif(1, -3, 3),
b1.psi = runif(1, -3, 3),
b2.psi = runif(1, -3, 3),
b3.psi = runif(1, -3, 3),
b4.psi = runif(1, -3, 3),
b0.p = runif(1, -3, 3),
b1.p = runif(1, -3, 3),
sigma = runif(1, 0, 0.1)
)
}
occ.parm <- c( "b0.psi",
"b1.psi",
"b2.psi",
"b3.psi",
"b4.psi",
"b0.p",
"b1.p",
"mean.psi",
"mean.p",
"totOcc",
"fit",
"fit.new",
"sigma"
)
# set up for MCMC run
ni <- 10000
nt <- 1
nb <- 2000
nc <- 3
# run the MCMC chain in JAGS
occ.wldcat <- jags( occ.data,
occ.inits,
occ.parm,
"JAGSmodel.wildcat.R",
n.chains=nc,
n.iter=ni,
n.burnin=nb,
n.thin=nt
)
occ.wldcat
exp(-4.940+1.568)/(1+exp(-4.940+1.568))
exp(-4.940)/(1+exp(-4.940))
mcmcplot(occ.wldcat)
# set up for MCMC run
ni <- 100000
nt <- 3
nb <- 10000
nc <- 3
# run the MCMC chain in JAGS
occ.wldcat <- jags( occ.data,
occ.inits,
occ.parm,
"JAGSmodel.wildcat.R",
n.chains=nc,
n.iter=ni,
n.burnin=nb,
n.thin=nt
)
occ.wldcat
exp(2.965)/(1+exp(2.965))
mcmcplot(occ.wldcat)
occ.data <- list( y=EH,
nSites=nSites,
nocc=nocc,
TC500=TC500,
rabbt.d=rabbt.d,
rabbt.ts=rabbt.ts,
d.sett=d.sett,
areaID=areaID,
narea=narea
)
occ.inits <- function(){
list(
z = rep(1,nSites),
b0.psi = runif(1, -3, 3),
b1.psi = runif(1, -3, 3),
b2.psi = runif(1, -3, 3),
b3.psi = runif(1, -3, 3),
b4.psi = runif(1, -3, 3),
b0.p = runif(1, -3, 3),
sigma = runif(1, 0, 0.1)
)
}
occ.parm <- c( "b0.psi",
"b1.psi",
"b2.psi",
"b3.psi",
"b4.psi",
"b0.p",
"mean.psi",
"mean.p",
"totOcc",
"fit",
"fit.new",
"sigma"
)
# set up for MCMC run
ni <- 100000
nt <- 3
nb <- 10000
nc <- 3
# run the MCMC chain in JAGS
occ.wldcat <- jags( occ.data,
occ.inits,
occ.parm,
"JAGSmodel.wildcat.R",
n.chains=nc,
n.iter=ni,
n.burnin=nb,
n.thin=nt
)
occ.wldcat
mcmcplot(occ.wldcat)
occ.inits <- function(){
list(
z = rep(1,nSites),
b0.psi = runif(1, -3, 3),
b1.psi = runif(1, -3, 3),
b2.psi = runif(1, -3, 3),
b3.psi = runif(1, -3, 3),
b4.psi = runif(1, -3, 3),
b5.psi = runif(1, -3, 3),
b0.p = runif(1, -3, 3),
sigma = runif(1, 0, 0.1)
)
}
occ.parm <- c( "b0.psi",
"b1.psi",
"b2.psi",
"b3.psi",
"b4.psi",
"b5.psi",
"b0.p",
"mean.psi",
"mean.p",
"totOcc",
"fit",
"fit.new",
"sigma"
)
# set up for MCMC run
ni <- 200000
nt <- 3
nb <- 10000
nc <- 3
# run the MCMC chain in JAGS
occ.wldcat <- jags( occ.data,
occ.inits,
occ.parm,
"JAGSmodel.wildcat.R",
n.chains=nc,
n.iter=ni,
n.burnin=nb,
n.thin=nt
)
occ.wldcat
exp(0.979)/(1+exp(0.979))
mcmcplot(occ.wldcat)
